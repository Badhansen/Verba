import os
from dotenv import load_dotenv
from goldenverba.components.interfaces import Generator

load_dotenv()


class GPT4Generator(Generator):
    """
    GPT4 Generator.
    """

    def __init__(self):
        super().__init__()
        self.name = "GPT4Generator"
        self.description = "Generator using OpenAI's GPT-4-1106-preview model"
        self.requires_library = ["openai"]
        self.requires_env = ["OPENAI_API_KEY"]
        self.streamable = True
        self.model_name = os.getenv("OPENAI_MODEL", "gpt-4-1106-preview")
        self.context_window = 10000

    async def generate_stream(
        self,
        queries: list[str],
        context: list[str],
        conversation: dict = None,
    ):
        """Generate a stream of response dicts based on a list of queries and list of contexts, and includes conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns Iterator[dict] - Token response generated by the Generator in this format {system:TOKEN, finish_reason:stop or empty}.
        """

        url = os.environ.get("OPENAI_API_KEY", "")
        if url == "":
            yield {
                "message": "Missing OpenAI API Key",
                "finish_reason": "stop",
            }

        if conversation is None:
            conversation = {}
        messages = self.prepare_messages(queries, context, conversation)

        try:
            import openai

            openai.api_key = os.getenv("OPENAI_API_KEY")
            base_url = os.environ.get("OPENAI_BASE_URL", "")
            if base_url:
                openai.api_base = base_url

            if "OPENAI_API_TYPE" in os.environ:
                openai.api_type = os.getenv("OPENAI_API_TYPE")
            if "OPENAI_API_BASE" in os.environ:
                openai.api_base = os.getenv("OPENAI_API_BASE")
            if "OPENAI_API_VERSION" in os.environ:
                openai.api_version = os.getenv("OPENAI_API_VERSION")

            chat_completion_arguments = {
                "model": self.model_name,
                "messages": messages,
                "stream": True,
                "temperature": 0.0,
            }
            if openai.api_type == "azure":
                chat_completion_arguments["deployment_id"] = self.model_name

            completion = await openai.ChatCompletion.acreate(
                **chat_completion_arguments
            )

            try:
                while True:
                    chunk = await completion.__anext__()
                    if len(chunk["choices"]) > 0:
                        if "content" in chunk["choices"][0]["delta"]:
                            yield {
                                "message": chunk["choices"][0]["delta"]["content"],
                                "finish_reason": chunk["choices"][0]["finish_reason"],
                            }
                        else:
                            yield {
                                "message": "",
                                "finish_reason": chunk["choices"][0]["finish_reason"],
                            }
            except StopAsyncIteration:
                pass

        except Exception:
            raise

    def prepare_messages(
        self, queries: list[str], context: list[str], conversation: dict[str, str]
    ) -> dict[str, str]:
        """
        Prepares a list of messages formatted for a Retrieval Augmented Generation chatbot system, including system instructions, previous conversation, and a new user query with context.

        @parameter queries: A list of strings representing the user queries to be answered.
        @parameter context: A list of strings representing the context information provided for the queries.
        @parameter conversation: A list of previous conversation messages that include the role and content.

        @returns A list of message dictionaries formatted for the chatbot. This includes an initial system message, the previous conversation messages, and the new user query encapsulated with the provided context.

        Each message in the list is a dictionary with 'role' and 'content' keys, where 'role' is either 'system' or 'user', and 'content' contains the relevant text. This will depend on the LLM used.
        """
        messages = [
            {
                "role": "system",
                "content": "You are an AI Customer Service Chatbot that works for Wayfair.  It is your job to assist users with their questions about orders, shipping, returns, billing, and home services. You are expected to provide accurate and helpful information to customers.  You are not expected to provide personal information or make decisions on behalf of the company.  You are expected to be polite and professional at all times.  You are expected to follow company policies and procedures.  You are expected to escalate issues to a human representative when necessary.  You are expected to maintain customer confidentiality and privacy.  You are expected to follow all laws and regulations.  You are expected to provide excellent customer service.  You are expected to be available to assist customers during your scheduled hours.  You are expected to be responsive to customer inquiries.  You are expected to be knowledgeable about the products and services offered by Wayfair.  You are expected to be able to answer questions about the company and its policies.  You are expected to be able to assist customers with their orders, shipping, returns, billing, and home services.  You are expected to be able to provide accurate and helpful information to customers.  You are expected to be able to resolve customer issues in a timely and professional manner.  You are expected to be able to provide excellent customer service.  You are expected to be able to communicate clearly and effectively with customers.  You are expected to be able to work independently and as part of a team.  You are expected to be able to follow company policies and procedures.  You are expected to be able to follow all laws and regulations.  You are expected to be able to maintain customer confidentiality and privacy.  You are expected to be able to provide excellent customer service.  You are expected to be able to be available to assist customers during your scheduled hours.  You are expected to be able to be responsive to customer inquiries.  You are expected to be able to be knowledgeable about the products and services offered by Wayfair.  You are expected to be able to be able to answer questions about the company and its policies.  You are expected to be able to be able to assist customers with their orders, shipping, returns, billing, and home services.  You are expected to be able to be able to provide accurate and helpful information to customers.  You are expected to be able to be able to resolve customer issues in a timely and professional manner.  You are expected to be able to be able to provide excellent customer service.  You are expected to be able to be able to communicate clearly and effectively with customers. ALWAYS BE FRIENDLY AND HELPFUL and use the provided data within the prompt to best answer questions!",
            }
        ]

        for message in conversation:
            messages.append({"role": message.type, "content": message.content})

        query = " ".join(queries)
        user_context = " ".join(context)

        messages.append(
            {
                "role": "user",
                "content": f"Please answer this query: '{query}' with this provided context: {user_context}",
            }
        )

        return messages
